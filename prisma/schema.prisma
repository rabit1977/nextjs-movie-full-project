generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Movie {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tmdbId Int    @unique
  imdbId String @unique

  title             String   @db.VarChar(256)
  originalTitle     String?  @db.VarChar(256)
  language          String?
  releaseYear       Int?
  releaseDate       String?
  genres            String[]
  plot              String   @db.VarChar(4096)
  runtime           Int
  adult             Boolean  @default(false)
  budget            Int
  revenue           String? // overflows int
  homepage          String?  @db.VarChar(511)
  status            String
  mpaaRating        String?
  keywords          String[] @default([])
  countriesOfOrigin String[] @default([])
  languages         String[] @default([])
  cast              String[] @default([])
  director          String?
  production        String?
  awardsSummary     String?

  // images
  posterUrl      String? @db.VarChar(512)
  posterWidth    Int?
  posterHeight   Int?
  backdropUrl    String? @db.VarChar(512)
  backdropWidth  Int?
  backdropHeight Int?

  // video
  trailerUrl       String? @db.VarChar(512)
  trailerYouTubeId String?

  // imdb
  imdbRating Float?
  imdbVotes  Int?
  imdbType   String?

  // tmdb
  tmdbPopularity Float?
  tmdbRating     Float?
  tmdbVotes      Int?

  // metacritic
  metacriticRating Float?
  metacriticVotes  Int?

  // rotten tomatoes
  rtCriticRating   Int?
  rtCriticVotes    Int?
  rtAudienceRating Int?
  rtAudienceVotes  Int?
  rtUrl            String?

  // letterboxd
  letterboxdScore Int?
  letterboxdVotes Int?

  // flickmetrix
  flickMetrixScore Int?
  flickMetrixId    Int?

  // custom / application-specific)
  foreign              Boolean? @default(false)
  relevancyScore       Float?
  imdbCustomPopularity Float?
  searchL              String?  @db.VarChar(2048)

  @@index([imdbRating, releaseYear, foreign, genres, searchL, relevancyScore])
  @@index([tmdbId])
  @@index([imdbId])
}
